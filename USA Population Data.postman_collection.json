{
	"info": {
		"_postman_id": "2bc7b2f2-e6b7-4d4e-9342-0cc1e7cdf58f",
		"name": "USA Population Data",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "31533941"
	},
	"item": [
		{
			"name": "Get Population by Nation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that the API responds with the correct status code (200 OK) for GET request",
							"pm.test(\"Verify that Status code of GET population by Nation request is ok (200)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Check if the response content type is JSON",
							"pm.test(\"Verify that Response of of GET population by Nation is in JSON format\", function () {",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');",
							"});",
							"//Validate the response time for a request to ensure it meets acceptable performance criteria.",
							"pm.test(\"Verify that Response time of GET population by Nation is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"// Test endpoint of the API (GET all population) to ensure they return the expected data.",
							"pm.test(\"Verify that GET all population returns expected data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
							"    pm.expect(jsonData.data[0]).to.have.property('ID Nation');",
							"    pm.expect(jsonData.data[0]).to.have.property('Nation');",
							"    pm.expect(jsonData.data[0]).to.have.property('ID Year');",
							"    pm.expect(jsonData.data[0]).to.have.property('Year');",
							"    pm.expect(jsonData.data[0]).to.have.property('Population');",
							"    pm.expect(jsonData.data[0]).to.have.property('Slug Nation');",
							"});",
							"//Verify that GET population by Nation returns United States Nation",
							"pm.test(\"Verify that GET population by Nation returns 'United States' Nation\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0].Nation).to.eql(\"United States\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Population by State",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that the API responds with the correct status code (200 OK) for GET request\r",
							"pm.test(\"Verify that Status code of GET population by State request is ok (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Check if the response content type is JSON\r",
							"pm.test(\"Verify that Response of of GET population by State is in JSON format\", function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"//Validate the response time for a request to ensure it meets acceptable performance criteria.\r",
							"pm.test(\"Verify that Response time of GET population by State is less than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"//Test API endpoint (GET population by STATES) to ensure they return the expected data.\r",
							"pm.test(\"Verify that GET population by states returns expected data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
							"    pm.expect(jsonData.data[0]).to.have.property('ID State');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('State');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('ID Year');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Year');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Population');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Slug State');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?drilldowns=State&measures=Population",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "State"
						},
						{
							"key": "measures",
							"value": "Population"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Population By Year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that the API responds with the correct status code (200 OK) for GET request\r",
							"pm.test(\"Verify that Status code of GET population by Year query parameter is ok (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Check if the response content type is JSON\r",
							"pm.test(\"Verify that Response of GET population by Year query parameter is in JSON format\", function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"//Validate the response time for a request to ensure it meets acceptable performance criteria.\r",
							"pm.test(\"Verify that Response time of GET population by Year query parameter is less than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"//Test API endpoint (GET population by Year) to ensure they return the expected data.\r",
							"pm.test(\"Verify that GET population by Year returns expected data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"    pm.expect(jsonData.data.length).to.be.greaterThan(0);\r",
							"    pm.expect(jsonData.data[0]).to.have.property('ID Nation');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Nation');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('ID Year');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Year');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Population');\r",
							"    pm.expect(jsonData.data[0]).to.have.property('Slug Nation');\r",
							"});\r",
							"\r",
							"//verify that GET population by Year returns data as per (year) query parameter.\r",
							"pm.test(\"Verify that GET population by Year returns data as per (year) query parameter\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].Year).to.eql(\"2020\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population&year=2020",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						},
						{
							"key": "year",
							"value": "2020"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Population by latest year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that Status code of GET population by latest Year is ok (200)\r",
							"pm.test(\"Verify that Status code of GET population by latest Year is ok (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Check if the response content type is JSON\r",
							"pm.test(\"Verify that Response of GET population by latest Year is in JSON format\", function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"//Validate the response time for a request to ensure it meets acceptable performance criteria.\r",
							"pm.test(\"Verify that Response time of GET population by latest Year is less than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"//verify that GET population by latest Year returns data of the latest year (2021).\r",
							"pm.test(\"Verify that GET population by latest Year returns data of the latest available year (2021)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].Year).to.eql(\"2021\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population&year=latest",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						},
						{
							"key": "year",
							"value": "latest"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET population by Not Found year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that Status code of GET population by Not Found Year is (Not Found 404)\r",
							"pm.test(\"Status code of GET population by Not Found Year is (Not Found 404)\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"// Check if the response content type is JSON\r",
							"pm.test(\"Response of GET population by Not Found Year is in JSON format\", function () {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"//Validate the response time for a request to ensure it meets acceptable performance criteria.\r",
							"pm.test(\"Verify that Response time of GET population by Not Found Year is less than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"// Verify that GET population by Not Found Year returns \"Not Found\" error message\r",
							"pm.test(\"Verify that 'Not Found' message appears for GET population by Not Found Year\", function () {\r",
							"    var responseBody = pm.response.text();\r",
							"    pm.expect(responseBody).to.include('Not Found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population&year=1990",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						},
						{
							"key": "year",
							"value": "1990"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Population data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that status code for POST request is Not Allowed (405)",
							"pm.test(\"Verify that Status code for POST request is Not Allowed (405)\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"// Verify that POST request returns \"Cannot POST\" error message",
							"pm.test(\"Verify that'Cannot POST' message appears for POST request\", function () {",
							"    var responseBody = pm.response.text();",
							"    pm.expect(responseBody).to.include('Cannot POST');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n            \"ID Nation\": \"01000US\",\n            \"Nation\": \"United States\",\n            \"ID Year\": 2001,\n            \"Year\": \"2001\",\n            \"Population\": 329725481,\n            \"Slug Nation\": \"united-states\"\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Population data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that status code for PUT request is Not Allowed (405)",
							"pm.test(\"Verify that Status code for PUT request is Not Allowed (405)\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"// Verify that PUT request returns \"Cannot PUT\" error message",
							"pm.test(\"Verify that'Cannot PUT' message appears for PUT request\", function () {",
							"    var responseBody = pm.response.text();",
							"    pm.expect(responseBody).to.include('Cannot PUT');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ID Nation\": \"01000US\",\n    \"Nation\": \"United States\",\n    \"ID Year\": 2021,\n    \"Year\": \"2021\",\n    \"Population\": 329725482,\n    \"Slug Nation\": \"united-states\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population&year=2021",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						},
						{
							"key": "year",
							"value": "2021"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Population data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify that status code for DELETE request is Not Allowed (405)",
							"pm.test(\"Verify that Status code for DELETE request is Not Allowed (405)\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"// Verify that DELETE request returns \"Cannot DELETE\" error message",
							"pm.test(\"Verify that'Cannot DELETE' message appears for DELETE request\", function () {",
							"    var responseBody = pm.response.text();",
							"    pm.expect(responseBody).to.include('Cannot DELETE');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}?drilldowns=Nation&measures=Population&year=2021",
					"host": [
						"{{URL}}"
					],
					"query": [
						{
							"key": "drilldowns",
							"value": "Nation"
						},
						{
							"key": "measures",
							"value": "Population"
						},
						{
							"key": "year",
							"value": "2021"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}